/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sand.accsys.infrastructure.idl.thrift.struct;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-21")
public class ResponseInfo implements org.apache.thrift.TBase<ResponseInfo, ResponseInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ResponseInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResponseInfo");

  private static final org.apache.thrift.protocol.TField RESP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("respCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RESP_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("respMsg", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResponseInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResponseInfoTupleSchemeFactory());
  }

  /**
   * 响应编码
   */
  public String respCode; // required
  /**
   * 响应信息
   */
  public String respMsg; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 响应编码
     */
    RESP_CODE((short)1, "respCode"),
    /**
     * 响应信息
     */
    RESP_MSG((short)2, "respMsg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESP_CODE
          return RESP_CODE;
        case 2: // RESP_MSG
          return RESP_MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESP_CODE, new org.apache.thrift.meta_data.FieldMetaData("respCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESP_MSG, new org.apache.thrift.meta_data.FieldMetaData("respMsg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResponseInfo.class, metaDataMap);
  }

  public ResponseInfo() {
  }

  public ResponseInfo(
    String respCode,
    String respMsg)
  {
    this();
    this.respCode = respCode;
    this.respMsg = respMsg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResponseInfo(ResponseInfo other) {
    if (other.isSetRespCode()) {
      this.respCode = other.respCode;
    }
    if (other.isSetRespMsg()) {
      this.respMsg = other.respMsg;
    }
  }

  public ResponseInfo deepCopy() {
    return new ResponseInfo(this);
  }

  @Override
  public void clear() {
    this.respCode = null;
    this.respMsg = null;
  }

  /**
   * 响应编码
   */
  public String getRespCode() {
    return this.respCode;
  }

  /**
   * 响应编码
   */
  public ResponseInfo setRespCode(String respCode) {
    this.respCode = respCode;
    return this;
  }

  public void unsetRespCode() {
    this.respCode = null;
  }

  /** Returns true if field respCode is set (has been assigned a value) and false otherwise */
  public boolean isSetRespCode() {
    return this.respCode != null;
  }

  public void setRespCodeIsSet(boolean value) {
    if (!value) {
      this.respCode = null;
    }
  }

  /**
   * 响应信息
   */
  public String getRespMsg() {
    return this.respMsg;
  }

  /**
   * 响应信息
   */
  public ResponseInfo setRespMsg(String respMsg) {
    this.respMsg = respMsg;
    return this;
  }

  public void unsetRespMsg() {
    this.respMsg = null;
  }

  /** Returns true if field respMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetRespMsg() {
    return this.respMsg != null;
  }

  public void setRespMsgIsSet(boolean value) {
    if (!value) {
      this.respMsg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESP_CODE:
      if (value == null) {
        unsetRespCode();
      } else {
        setRespCode((String)value);
      }
      break;

    case RESP_MSG:
      if (value == null) {
        unsetRespMsg();
      } else {
        setRespMsg((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESP_CODE:
      return getRespCode();

    case RESP_MSG:
      return getRespMsg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESP_CODE:
      return isSetRespCode();
    case RESP_MSG:
      return isSetRespMsg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResponseInfo)
      return this.equals((ResponseInfo)that);
    return false;
  }

  public boolean equals(ResponseInfo that) {
    if (that == null)
      return false;

    boolean this_present_respCode = true && this.isSetRespCode();
    boolean that_present_respCode = true && that.isSetRespCode();
    if (this_present_respCode || that_present_respCode) {
      if (!(this_present_respCode && that_present_respCode))
        return false;
      if (!this.respCode.equals(that.respCode))
        return false;
    }

    boolean this_present_respMsg = true && this.isSetRespMsg();
    boolean that_present_respMsg = true && that.isSetRespMsg();
    if (this_present_respMsg || that_present_respMsg) {
      if (!(this_present_respMsg && that_present_respMsg))
        return false;
      if (!this.respMsg.equals(that.respMsg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_respCode = true && (isSetRespCode());
    list.add(present_respCode);
    if (present_respCode)
      list.add(respCode);

    boolean present_respMsg = true && (isSetRespMsg());
    list.add(present_respMsg);
    if (present_respMsg)
      list.add(respMsg);

    return list.hashCode();
  }

  @Override
  public int compareTo(ResponseInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRespCode()).compareTo(other.isSetRespCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRespCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.respCode, other.respCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRespMsg()).compareTo(other.isSetRespMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRespMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.respMsg, other.respMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResponseInfo(");
    boolean first = true;

    sb.append("respCode:");
    if (this.respCode == null) {
      sb.append("null");
    } else {
      sb.append(this.respCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("respMsg:");
    if (this.respMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.respMsg);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (respCode == null) {
      throw new TProtocolException("Required field 'respCode' was not present! Struct: " + toString());
    }
    if (respMsg == null) {
      throw new TProtocolException("Required field 'respMsg' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResponseInfoStandardSchemeFactory implements SchemeFactory {
    public ResponseInfoStandardScheme getScheme() {
      return new ResponseInfoStandardScheme();
    }
  }

  private static class ResponseInfoStandardScheme extends StandardScheme<ResponseInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResponseInfo struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESP_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.respCode = iprot.readString();
              struct.setRespCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESP_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.respMsg = iprot.readString();
              struct.setRespMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResponseInfo struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.respCode != null) {
        oprot.writeFieldBegin(RESP_CODE_FIELD_DESC);
        oprot.writeString(struct.respCode);
        oprot.writeFieldEnd();
      }
      if (struct.respMsg != null) {
        oprot.writeFieldBegin(RESP_MSG_FIELD_DESC);
        oprot.writeString(struct.respMsg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResponseInfoTupleSchemeFactory implements SchemeFactory {
    public ResponseInfoTupleScheme getScheme() {
      return new ResponseInfoTupleScheme();
    }
  }

  private static class ResponseInfoTupleScheme extends TupleScheme<ResponseInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResponseInfo struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.respCode);
      oprot.writeString(struct.respMsg);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResponseInfo struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.respCode = iprot.readString();
      struct.setRespCodeIsSet(true);
      struct.respMsg = iprot.readString();
      struct.setRespMsgIsSet(true);
    }
  }

}

