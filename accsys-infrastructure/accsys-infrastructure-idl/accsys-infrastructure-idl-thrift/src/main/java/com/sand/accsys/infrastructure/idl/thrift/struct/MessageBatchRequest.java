/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sand.accsys.infrastructure.idl.thrift.struct;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-21")
public class MessageBatchRequest implements org.apache.thrift.TBase<MessageBatchRequest, MessageBatchRequest._Fields>, java.io.Serializable, Cloneable, Comparable<MessageBatchRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageBatchRequest");

  private static final org.apache.thrift.protocol.TField PRODUCT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("productInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField BATCH_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("batchNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MESSAGE_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("messageHeader", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MESSAGE_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("messageBody", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessageBatchRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MessageBatchRequestTupleSchemeFactory());
  }

  public ProductInfo productInfo; // required
  public String batchNo; // required
  public String messageHeader; // required
  public List<String> messageBody; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRODUCT_INFO((short)1, "productInfo"),
    BATCH_NO((short)2, "batchNo"),
    MESSAGE_HEADER((short)3, "messageHeader"),
    MESSAGE_BODY((short)4, "messageBody");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_INFO
          return PRODUCT_INFO;
        case 2: // BATCH_NO
          return BATCH_NO;
        case 3: // MESSAGE_HEADER
          return MESSAGE_HEADER;
        case 4: // MESSAGE_BODY
          return MESSAGE_BODY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_INFO, new org.apache.thrift.meta_data.FieldMetaData("productInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductInfo.class)));
    tmpMap.put(_Fields.BATCH_NO, new org.apache.thrift.meta_data.FieldMetaData("batchNo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE_HEADER, new org.apache.thrift.meta_data.FieldMetaData("messageHeader", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE_BODY, new org.apache.thrift.meta_data.FieldMetaData("messageBody", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageBatchRequest.class, metaDataMap);
  }

  public MessageBatchRequest() {
  }

  public MessageBatchRequest(
    ProductInfo productInfo,
    String batchNo,
    String messageHeader,
    List<String> messageBody)
  {
    this();
    this.productInfo = productInfo;
    this.batchNo = batchNo;
    this.messageHeader = messageHeader;
    this.messageBody = messageBody;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessageBatchRequest(MessageBatchRequest other) {
    if (other.isSetProductInfo()) {
      this.productInfo = new ProductInfo(other.productInfo);
    }
    if (other.isSetBatchNo()) {
      this.batchNo = other.batchNo;
    }
    if (other.isSetMessageHeader()) {
      this.messageHeader = other.messageHeader;
    }
    if (other.isSetMessageBody()) {
      List<String> __this__messageBody = new ArrayList<String>(other.messageBody);
      this.messageBody = __this__messageBody;
    }
  }

  public MessageBatchRequest deepCopy() {
    return new MessageBatchRequest(this);
  }

  @Override
  public void clear() {
    this.productInfo = null;
    this.batchNo = null;
    this.messageHeader = null;
    this.messageBody = null;
  }

  public ProductInfo getProductInfo() {
    return this.productInfo;
  }

  public MessageBatchRequest setProductInfo(ProductInfo productInfo) {
    this.productInfo = productInfo;
    return this;
  }

  public void unsetProductInfo() {
    this.productInfo = null;
  }

  /** Returns true if field productInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetProductInfo() {
    return this.productInfo != null;
  }

  public void setProductInfoIsSet(boolean value) {
    if (!value) {
      this.productInfo = null;
    }
  }

  public String getBatchNo() {
    return this.batchNo;
  }

  public MessageBatchRequest setBatchNo(String batchNo) {
    this.batchNo = batchNo;
    return this;
  }

  public void unsetBatchNo() {
    this.batchNo = null;
  }

  /** Returns true if field batchNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchNo() {
    return this.batchNo != null;
  }

  public void setBatchNoIsSet(boolean value) {
    if (!value) {
      this.batchNo = null;
    }
  }

  public String getMessageHeader() {
    return this.messageHeader;
  }

  public MessageBatchRequest setMessageHeader(String messageHeader) {
    this.messageHeader = messageHeader;
    return this;
  }

  public void unsetMessageHeader() {
    this.messageHeader = null;
  }

  /** Returns true if field messageHeader is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageHeader() {
    return this.messageHeader != null;
  }

  public void setMessageHeaderIsSet(boolean value) {
    if (!value) {
      this.messageHeader = null;
    }
  }

  public int getMessageBodySize() {
    return (this.messageBody == null) ? 0 : this.messageBody.size();
  }

  public java.util.Iterator<String> getMessageBodyIterator() {
    return (this.messageBody == null) ? null : this.messageBody.iterator();
  }

  public void addToMessageBody(String elem) {
    if (this.messageBody == null) {
      this.messageBody = new ArrayList<String>();
    }
    this.messageBody.add(elem);
  }

  public List<String> getMessageBody() {
    return this.messageBody;
  }

  public MessageBatchRequest setMessageBody(List<String> messageBody) {
    this.messageBody = messageBody;
    return this;
  }

  public void unsetMessageBody() {
    this.messageBody = null;
  }

  /** Returns true if field messageBody is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageBody() {
    return this.messageBody != null;
  }

  public void setMessageBodyIsSet(boolean value) {
    if (!value) {
      this.messageBody = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_INFO:
      if (value == null) {
        unsetProductInfo();
      } else {
        setProductInfo((ProductInfo)value);
      }
      break;

    case BATCH_NO:
      if (value == null) {
        unsetBatchNo();
      } else {
        setBatchNo((String)value);
      }
      break;

    case MESSAGE_HEADER:
      if (value == null) {
        unsetMessageHeader();
      } else {
        setMessageHeader((String)value);
      }
      break;

    case MESSAGE_BODY:
      if (value == null) {
        unsetMessageBody();
      } else {
        setMessageBody((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_INFO:
      return getProductInfo();

    case BATCH_NO:
      return getBatchNo();

    case MESSAGE_HEADER:
      return getMessageHeader();

    case MESSAGE_BODY:
      return getMessageBody();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_INFO:
      return isSetProductInfo();
    case BATCH_NO:
      return isSetBatchNo();
    case MESSAGE_HEADER:
      return isSetMessageHeader();
    case MESSAGE_BODY:
      return isSetMessageBody();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MessageBatchRequest)
      return this.equals((MessageBatchRequest)that);
    return false;
  }

  public boolean equals(MessageBatchRequest that) {
    if (that == null)
      return false;

    boolean this_present_productInfo = true && this.isSetProductInfo();
    boolean that_present_productInfo = true && that.isSetProductInfo();
    if (this_present_productInfo || that_present_productInfo) {
      if (!(this_present_productInfo && that_present_productInfo))
        return false;
      if (!this.productInfo.equals(that.productInfo))
        return false;
    }

    boolean this_present_batchNo = true && this.isSetBatchNo();
    boolean that_present_batchNo = true && that.isSetBatchNo();
    if (this_present_batchNo || that_present_batchNo) {
      if (!(this_present_batchNo && that_present_batchNo))
        return false;
      if (!this.batchNo.equals(that.batchNo))
        return false;
    }

    boolean this_present_messageHeader = true && this.isSetMessageHeader();
    boolean that_present_messageHeader = true && that.isSetMessageHeader();
    if (this_present_messageHeader || that_present_messageHeader) {
      if (!(this_present_messageHeader && that_present_messageHeader))
        return false;
      if (!this.messageHeader.equals(that.messageHeader))
        return false;
    }

    boolean this_present_messageBody = true && this.isSetMessageBody();
    boolean that_present_messageBody = true && that.isSetMessageBody();
    if (this_present_messageBody || that_present_messageBody) {
      if (!(this_present_messageBody && that_present_messageBody))
        return false;
      if (!this.messageBody.equals(that.messageBody))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_productInfo = true && (isSetProductInfo());
    list.add(present_productInfo);
    if (present_productInfo)
      list.add(productInfo);

    boolean present_batchNo = true && (isSetBatchNo());
    list.add(present_batchNo);
    if (present_batchNo)
      list.add(batchNo);

    boolean present_messageHeader = true && (isSetMessageHeader());
    list.add(present_messageHeader);
    if (present_messageHeader)
      list.add(messageHeader);

    boolean present_messageBody = true && (isSetMessageBody());
    list.add(present_messageBody);
    if (present_messageBody)
      list.add(messageBody);

    return list.hashCode();
  }

  @Override
  public int compareTo(MessageBatchRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProductInfo()).compareTo(other.isSetProductInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productInfo, other.productInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatchNo()).compareTo(other.isSetBatchNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchNo, other.batchNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageHeader()).compareTo(other.isSetMessageHeader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageHeader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageHeader, other.messageHeader);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageBody()).compareTo(other.isSetMessageBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageBody, other.messageBody);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MessageBatchRequest(");
    boolean first = true;

    sb.append("productInfo:");
    if (this.productInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.productInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("batchNo:");
    if (this.batchNo == null) {
      sb.append("null");
    } else {
      sb.append(this.batchNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageHeader:");
    if (this.messageHeader == null) {
      sb.append("null");
    } else {
      sb.append(this.messageHeader);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageBody:");
    if (this.messageBody == null) {
      sb.append("null");
    } else {
      sb.append(this.messageBody);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (productInfo == null) {
      throw new TProtocolException("Required field 'productInfo' was not present! Struct: " + toString());
    }
    if (batchNo == null) {
      throw new TProtocolException("Required field 'batchNo' was not present! Struct: " + toString());
    }
    if (messageHeader == null) {
      throw new TProtocolException("Required field 'messageHeader' was not present! Struct: " + toString());
    }
    if (messageBody == null) {
      throw new TProtocolException("Required field 'messageBody' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (productInfo != null) {
      productInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageBatchRequestStandardSchemeFactory implements SchemeFactory {
    public MessageBatchRequestStandardScheme getScheme() {
      return new MessageBatchRequestStandardScheme();
    }
  }

  private static class MessageBatchRequestStandardScheme extends StandardScheme<MessageBatchRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MessageBatchRequest struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.productInfo = new ProductInfo();
              struct.productInfo.read(iprot);
              struct.setProductInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BATCH_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.batchNo = iprot.readString();
              struct.setBatchNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MESSAGE_HEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.messageHeader = iprot.readString();
              struct.setMessageHeaderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MESSAGE_BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.messageBody = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.messageBody.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setMessageBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MessageBatchRequest struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.productInfo != null) {
        oprot.writeFieldBegin(PRODUCT_INFO_FIELD_DESC);
        struct.productInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.batchNo != null) {
        oprot.writeFieldBegin(BATCH_NO_FIELD_DESC);
        oprot.writeString(struct.batchNo);
        oprot.writeFieldEnd();
      }
      if (struct.messageHeader != null) {
        oprot.writeFieldBegin(MESSAGE_HEADER_FIELD_DESC);
        oprot.writeString(struct.messageHeader);
        oprot.writeFieldEnd();
      }
      if (struct.messageBody != null) {
        oprot.writeFieldBegin(MESSAGE_BODY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.messageBody.size()));
          for (String _iter3 : struct.messageBody)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageBatchRequestTupleSchemeFactory implements SchemeFactory {
    public MessageBatchRequestTupleScheme getScheme() {
      return new MessageBatchRequestTupleScheme();
    }
  }

  private static class MessageBatchRequestTupleScheme extends TupleScheme<MessageBatchRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MessageBatchRequest struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.productInfo.write(oprot);
      oprot.writeString(struct.batchNo);
      oprot.writeString(struct.messageHeader);
      {
        oprot.writeI32(struct.messageBody.size());
        for (String _iter4 : struct.messageBody)
        {
          oprot.writeString(_iter4);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MessageBatchRequest struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.productInfo = new ProductInfo();
      struct.productInfo.read(iprot);
      struct.setProductInfoIsSet(true);
      struct.batchNo = iprot.readString();
      struct.setBatchNoIsSet(true);
      struct.messageHeader = iprot.readString();
      struct.setMessageHeaderIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.messageBody = new ArrayList<String>(_list5.size);
        String _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = iprot.readString();
          struct.messageBody.add(_elem6);
        }
      }
      struct.setMessageBodyIsSet(true);
    }
  }

}

