/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sand.accsys.infrastructure.idl.thrift.struct;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * base struct/
 * /**‰∫ßÂìÅÊï∞ÊçÆ
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-21")
public class ProductInfo implements org.apache.thrift.TBase<ProductInfo, ProductInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ProductInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductInfo");

  private static final org.apache.thrift.protocol.TField PRODUCT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("productCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FROM_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("fromInfo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ROUTE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("routeInfo", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductInfoTupleSchemeFactory());
  }

  /**
   * ‰∫ßÂìÅÁºñÁ†Å
   */
  public String productCode; // required
  /**
   * ËØ∑Ê±ÇÊ∏†ÈÅì
   */
  public String fromInfo; // optional
  /**
   * Ë∑ØÁî±Âà∞ÊúçÂä?
   */
  public String routeInfo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * ‰∫ßÂìÅÁºñÁ†Å
     */
    PRODUCT_CODE((short)1, "productCode"),
    /**
     * ËØ∑Ê±ÇÊ∏†ÈÅì
     */
    FROM_INFO((short)2, "fromInfo"),
    /**
     * Ë∑ØÁî±Âà∞ÊúçÂä?
     */
    ROUTE_INFO((short)3, "routeInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_CODE
          return PRODUCT_CODE;
        case 2: // FROM_INFO
          return FROM_INFO;
        case 3: // ROUTE_INFO
          return ROUTE_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.FROM_INFO,_Fields.ROUTE_INFO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_CODE, new org.apache.thrift.meta_data.FieldMetaData("productCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_INFO, new org.apache.thrift.meta_data.FieldMetaData("fromInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROUTE_INFO, new org.apache.thrift.meta_data.FieldMetaData("routeInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductInfo.class, metaDataMap);
  }

  public ProductInfo() {
  }

  public ProductInfo(
    String productCode)
  {
    this();
    this.productCode = productCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductInfo(ProductInfo other) {
    if (other.isSetProductCode()) {
      this.productCode = other.productCode;
    }
    if (other.isSetFromInfo()) {
      this.fromInfo = other.fromInfo;
    }
    if (other.isSetRouteInfo()) {
      this.routeInfo = other.routeInfo;
    }
  }

  public ProductInfo deepCopy() {
    return new ProductInfo(this);
  }

  @Override
  public void clear() {
    this.productCode = null;
    this.fromInfo = null;
    this.routeInfo = null;
  }

  /**
   * ‰∫ßÂìÅÁºñÁ†Å
   */
  public String getProductCode() {
    return this.productCode;
  }

  /**
   * ‰∫ßÂìÅÁºñÁ†Å
   */
  public ProductInfo setProductCode(String productCode) {
    this.productCode = productCode;
    return this;
  }

  public void unsetProductCode() {
    this.productCode = null;
  }

  /** Returns true if field productCode is set (has been assigned a value) and false otherwise */
  public boolean isSetProductCode() {
    return this.productCode != null;
  }

  public void setProductCodeIsSet(boolean value) {
    if (!value) {
      this.productCode = null;
    }
  }

  /**
   * ËØ∑Ê±ÇÊ∏†ÈÅì
   */
  public String getFromInfo() {
    return this.fromInfo;
  }

  /**
   * ËØ∑Ê±ÇÊ∏†ÈÅì
   */
  public ProductInfo setFromInfo(String fromInfo) {
    this.fromInfo = fromInfo;
    return this;
  }

  public void unsetFromInfo() {
    this.fromInfo = null;
  }

  /** Returns true if field fromInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetFromInfo() {
    return this.fromInfo != null;
  }

  public void setFromInfoIsSet(boolean value) {
    if (!value) {
      this.fromInfo = null;
    }
  }

  /**
   * Ë∑ØÁî±Âà∞ÊúçÂä?
   */
  public String getRouteInfo() {
    return this.routeInfo;
  }

  /**
   * Ë∑ØÁî±Âà∞ÊúçÂä?
   */
  public ProductInfo setRouteInfo(String routeInfo) {
    this.routeInfo = routeInfo;
    return this;
  }

  public void unsetRouteInfo() {
    this.routeInfo = null;
  }

  /** Returns true if field routeInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetRouteInfo() {
    return this.routeInfo != null;
  }

  public void setRouteInfoIsSet(boolean value) {
    if (!value) {
      this.routeInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_CODE:
      if (value == null) {
        unsetProductCode();
      } else {
        setProductCode((String)value);
      }
      break;

    case FROM_INFO:
      if (value == null) {
        unsetFromInfo();
      } else {
        setFromInfo((String)value);
      }
      break;

    case ROUTE_INFO:
      if (value == null) {
        unsetRouteInfo();
      } else {
        setRouteInfo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_CODE:
      return getProductCode();

    case FROM_INFO:
      return getFromInfo();

    case ROUTE_INFO:
      return getRouteInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_CODE:
      return isSetProductCode();
    case FROM_INFO:
      return isSetFromInfo();
    case ROUTE_INFO:
      return isSetRouteInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductInfo)
      return this.equals((ProductInfo)that);
    return false;
  }

  public boolean equals(ProductInfo that) {
    if (that == null)
      return false;

    boolean this_present_productCode = true && this.isSetProductCode();
    boolean that_present_productCode = true && that.isSetProductCode();
    if (this_present_productCode || that_present_productCode) {
      if (!(this_present_productCode && that_present_productCode))
        return false;
      if (!this.productCode.equals(that.productCode))
        return false;
    }

    boolean this_present_fromInfo = true && this.isSetFromInfo();
    boolean that_present_fromInfo = true && that.isSetFromInfo();
    if (this_present_fromInfo || that_present_fromInfo) {
      if (!(this_present_fromInfo && that_present_fromInfo))
        return false;
      if (!this.fromInfo.equals(that.fromInfo))
        return false;
    }

    boolean this_present_routeInfo = true && this.isSetRouteInfo();
    boolean that_present_routeInfo = true && that.isSetRouteInfo();
    if (this_present_routeInfo || that_present_routeInfo) {
      if (!(this_present_routeInfo && that_present_routeInfo))
        return false;
      if (!this.routeInfo.equals(that.routeInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_productCode = true && (isSetProductCode());
    list.add(present_productCode);
    if (present_productCode)
      list.add(productCode);

    boolean present_fromInfo = true && (isSetFromInfo());
    list.add(present_fromInfo);
    if (present_fromInfo)
      list.add(fromInfo);

    boolean present_routeInfo = true && (isSetRouteInfo());
    list.add(present_routeInfo);
    if (present_routeInfo)
      list.add(routeInfo);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProductInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProductCode()).compareTo(other.isSetProductCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCode, other.productCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromInfo()).compareTo(other.isSetFromInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromInfo, other.fromInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRouteInfo()).compareTo(other.isSetRouteInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRouteInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routeInfo, other.routeInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductInfo(");
    boolean first = true;

    sb.append("productCode:");
    if (this.productCode == null) {
      sb.append("null");
    } else {
      sb.append(this.productCode);
    }
    first = false;
    if (isSetFromInfo()) {
      if (!first) sb.append(", ");
      sb.append("fromInfo:");
      if (this.fromInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.fromInfo);
      }
      first = false;
    }
    if (isSetRouteInfo()) {
      if (!first) sb.append(", ");
      sb.append("routeInfo:");
      if (this.routeInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.routeInfo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (productCode == null) {
      throw new TProtocolException("Required field 'productCode' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductInfoStandardSchemeFactory implements SchemeFactory {
    public ProductInfoStandardScheme getScheme() {
      return new ProductInfoStandardScheme();
    }
  }

  private static class ProductInfoStandardScheme extends StandardScheme<ProductInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductInfo struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productCode = iprot.readString();
              struct.setProductCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FROM_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromInfo = iprot.readString();
              struct.setFromInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROUTE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.routeInfo = iprot.readString();
              struct.setRouteInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductInfo struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.productCode != null) {
        oprot.writeFieldBegin(PRODUCT_CODE_FIELD_DESC);
        oprot.writeString(struct.productCode);
        oprot.writeFieldEnd();
      }
      if (struct.fromInfo != null) {
        if (struct.isSetFromInfo()) {
          oprot.writeFieldBegin(FROM_INFO_FIELD_DESC);
          oprot.writeString(struct.fromInfo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.routeInfo != null) {
        if (struct.isSetRouteInfo()) {
          oprot.writeFieldBegin(ROUTE_INFO_FIELD_DESC);
          oprot.writeString(struct.routeInfo);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductInfoTupleSchemeFactory implements SchemeFactory {
    public ProductInfoTupleScheme getScheme() {
      return new ProductInfoTupleScheme();
    }
  }

  private static class ProductInfoTupleScheme extends TupleScheme<ProductInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductInfo struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.productCode);
      BitSet optionals = new BitSet();
      if (struct.isSetFromInfo()) {
        optionals.set(0);
      }
      if (struct.isSetRouteInfo()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFromInfo()) {
        oprot.writeString(struct.fromInfo);
      }
      if (struct.isSetRouteInfo()) {
        oprot.writeString(struct.routeInfo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductInfo struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.productCode = iprot.readString();
      struct.setProductCodeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.fromInfo = iprot.readString();
        struct.setFromInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.routeInfo = iprot.readString();
        struct.setRouteInfoIsSet(true);
      }
    }
  }

}

